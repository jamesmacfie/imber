'use strict';Template.sprinklerItem.helpers(	{		isChangingState: function() {			return Session.get('changingState');		},		primarySprinklerData: {			iconType: 'primary'		},		secondarySprinklerData: {			iconType: 'secondary'		},		remainingTime: function() {			var remainingTime = (this.timer.duration - this.currentTimer) / 60;			if (remainingTime > 1) {				return Math.floor(remainingTime) + ' minutes';			} else {				return remainingTime * 60 + ' seconds';			}		},		isActiveOrPaused: function() {			return this.status === 'active' ||				this.status === 'paused';		},		isActive: function() {			return this.status === 'active';		},		isInactive: function() {			return this.status === 'inactive';		},		isPaused: function() {			return this.status === 'paused';		},		timerTemplate: function() {			return this.timer.active ? 'iconTimerOn' : 'iconTimerOff';		},		timerActive: function() {			return this.timer.active;		},		timerSchedule: function() {			function getDayText(day) {				if (day ===1) {					return 'day';				} else if (day === 2) {					return 'couple of days';				} else if (day === 4) {					return 'few days';				} else if (day === 14) {					return 'couple of weeks';				}				return day + ' days';			}			var timer = this.timer,				timeMoment = new moment('2014/01/01 ' + timer.time);			if (!timer.active) {				return 'This sprinkler is not scheduled to run automatically';			}			return ['Scheduled to turn on every', getDayText(timer.days), 'at', timeMoment.format('LT'), 'for', timer.length, timer.length > 1 ? 'minutes': 'minute'].join(' ');		}	});Template.sprinklerItem.events = {	'click .js-startSprinkler': function() {		var activeSprinkler = Sprinklers.findOne({			status: 'active'		});		if (activeSprinkler) {			Sprinklers.update(activeSprinkler._id, {				$set: {					status: 'inactive',					currentTimer: 0				}			});		}		Sprinklers.update(this._id, {			$set: {				status: 'active'			}		});		History.insert({	    sprinklerName: this.name,	    action: 'start',	    timeStamp: new Date()		});	},	'click .js-resumeSprinkler': function() {		Sprinklers.update(this._id, {			$set: {				status: 'active'			}		});		History.insert({	    sprinklerName: this.name,	    action: 'resume',	    timeStamp: new Date()		});	},	'click .js-pauseSprinkler': function() {		Sprinklers.update(this._id, {			$set: {				status: 'paused'			}		});		History.insert({	    sprinklerName: this.name,	    action: 'pause',	    timeStamp: new Date()		});	},	'click .js-stopSprinkler': function() {		Sprinklers.update(this._id, {			$set: {				status: 'inactive',				currentTimer: 0			}		});		History.insert({	    sprinklerName: this.name,	    action: 'stop',	    timeStamp: new Date()		});	},	'click .js-resetSprinkler': function() {		Sprinklers.update(this._id, {			$set: {				currentTimer: 0			}		});		History.insert({	    sprinklerName: this.name,	    action: 'reset',	    timeStamp: new Date()		});	}}