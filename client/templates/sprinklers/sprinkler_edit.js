'use strict';/* Helper functions for the sprinklerEdit template */Template.sprinklerEdit.helpers(  {    /*     * We store the duration in the database as seconds but display the information to the user     * as minutes. This function converts that timer into the minutes for the user.     *     * Generally this should result in a whole number. If not, round the value to the nearest     * whole number.     *     * @returns {number} How many minutes this sprinkler runs for     */    displayDuration: function() {      try {        return Math.round(this.timer.duration / 60);      } catch (e) {        // Something went wrong. Just return zero        return 0;      }    },    /*     * Has a list of the icons that the user can choose from. The returned object is in the     * format that the tempalte `selectOption` requires.     *     * Determines which icon should be shown as selected based on the sprinkler that is passed     * through as scope     *     * @returns {object} Icon details for the `selectOption` template     */    icons: function() {      var me = this,        icons = ['Cloud','Cutlery','Raindrop','Fire','Flower','Heart','Landscape','Sun'];      return icons.map(function(icon) {        // Our iconValues are the captilised icon name prefixed with `icon`        var iconValue = 'icon' + icon;        return {          value: iconValue,          display: icon,          selected: me.icon === iconValue ? true : false        };      });    },    /*     * Connections are a bit weird and need improvement.     *     * The mapping of a connection is `1: Top, 2: Middle, 3: Bottom` which correspond     * to a connection map that lives on the remote control. The strings (top, middle     * bottom) are there for convenient reference and, depending on how the remote     * arduino is setup may not actually represent the real physical world.     *     * Anyhoo - this map is returned in the format needed for the `selectOption`     *     * @returns {object} Connection details for the `selectOption` template     */    connections: function(){      var me = this,        connections = ['Top', 'Middle', 'Bottom'];      return connections.map(function(c, i) {        var connectionValue = i + 1;        return {          value: connectionValue,          display: c,          selected: me.connection === connectionValue ? true : false        };      });    }  });/* Event listeners for the sprinklerEdit template */Template.sprinklerEdit.events(  {    /*     * Deals with the submission of the edit form. Currently has no validation built     * in.     *     * Simply goes through the inputs inside the form and puts them in the correct format     * for the mongo updates. Note that names with a '-' in their name are treated as child     * objects in the record in the sprinkler collection (can't use `.` as it's not a valid     * name)     *     * Finally navigates the user to the list of sprinklers     */    'submit .js-saveSprinkler': function(event) {      // Don't actually submit      event.preventDefault();      var form = $(event.target),        formInputNames = ['name', 'notes', 'icon', 'connection', 'timer-time', 'timer-days', 'timer-duration'],        setObj = {};      /*       * Returns an array of mapped form values       *       * @returns {array} Mapped form values       */      function getFormValues(arr) {        return arr.map(getFormValue);      }      /*       * Gets the form value for a given input name and formats it as an object containing       * both the input's name and value       *       * @param {string} [inputName] The name attribute of the form element       *       * @returns {object} An object containing the inputs name and value       */      function getFormValue(inputName) {        try {          var input = form.find('[name="' + inputName + '"]');          return {            name: inputName.replace('-', '.'),            value: input.val()          };        } catch(r) {          return;        }      }      // Grab all our form values and add them to the object that updates the sprinkler      // collection      getFormValues(formInputNames).forEach(function(item) {        setObj[item.name] = item.value;      });      // Convert the duration into seconds      setObj['timer.duration'] = setObj['timer.duration'] * 60;      Sprinklers.update(this._id, {        $set: setObj      });      // Return back to the sprinklerList page      Router.go('sprinklerList');    }  });