'use strict';Template.sprinklerEdit.helpers(  {    /*     * We store the duration in the database as seconds but display the information to the user     * as minutes. This function converts that timer into the minutes for the user.     * Generally this should result in a whole number. If not, round the value to the nearest     * whoe number.     */    displayDuration: function() {      try {        return Math.round(this.timer.duration / 60);      } catch (e) {        // Something went wrong. Just return zero        return 0;      }    },    /*     * Has a list of the icons that the user can choose from. The returned object is in the     * format that the tempalte `selectOption` requires (i.e. value, display, selected)     * Determines which icon should be shown as selected based on the sprinkler that is passed     * through as scope     */    icons: function() {      var me = this,        icons = ['Cloud','Cutlery','Raindrop','Fire','Flower','Heart','Landscape','Sun'];      return icons.map(function(icon) {        // Our iconValues are the captilised icon name prefixed with `icon`        var iconValue = 'icon' + icon;        return {          value: iconValue,          display: icon,          selected: me.icon === iconValue ? true : false        };      });    }  })Template.sprinklerEdit.events(  {    /*     * Deals with the submission of the edit form. Currently has no validation built     * in.     * Simply goes through the inputs inside the form and puts them in the correct format     * for the mongo updates. Note that names with a '-' in their name are treated as child     * objects in the record in the sprinkler collection (can't use `.` as it's not a valid     * name);     */    'submit .js-saveSprinkler': function(event) {      // Don't actually submit      event.preventDefault();      var form = $(event.target),        setObj = {};      function getFormValues(arr) {        return arr.map(getFormValue);      }      function getFormValue(inputName) {        try {          var input = form.find('[name="' + inputName + '"]');          return {            name: inputName.replace('-', '.'),            value: input.val()          };        } catch(r) {          return;        }      }      getFormValues(['name', 'notes', 'icon', 'timer-time', 'timer-days', 'timer-duration']).forEach(function(item) {        setObj[item.name] = item.value;      });      setObj['timer.duration'] = setObj['timer.duration'] * 60;      Sprinklers.update(this._id, {        $set: setObj      });      Router.go('sprinklerList');    }  })